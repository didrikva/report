{% extends "base.html.twig" %}

{% block title %}Metrics analys{% endblock %}

{% block main %}
<div class="game_21">
    <h1>Introduktion</h1>
    <p>När det kommer till kodkvalitet brukar man utgå ifrån sex stycken C som en tumregel. Dessa sex C är: Coverage, Complexity, Cohesion, Coupling och CRAP (Change Risk Anti-Patterns). Codestyle är hur lättläst koden är. Det kan handla om indentering i kod, namngivning eller överkomplicerade kodstrukturer. Varför detta är vikitgt är för att andra enklare ska kunna förstå och göra ändringar i koden. Coverage handlar om hur stor del av koden som körs vid tester. Dessto högra coverage dessto högre chans att man hittar och kan åtgärna buggar. Complexity handlar om hur komplex koden är, ju fler loopar som if eller for dessto högre värde. Detta leder till svårare att förstå samt underhålla. Cohesion är sammanhållningen mellan klasser och deras relationer. Bättre värden gör att en klass gör sin specifika sak bra, och gör det enklare att förstå och återanvända den klassen. Exempel från min kod är LibraryController som man enkelt kan säga gör för mycket på egen hand. Coupling är beroendet mellan de olika klasserna. Ifall man får hög coupling kna koden vara svår att förändra då många klasser är beroende av varandra och sättet dem fungerar. CRAP handlar om hur lätt det är att göra förändringar i koden. Den blandar koplexitet med testtäckning och beräknar hur svårt det är att göra ändringar i koden. Ett bra värde hjälper till med testning. Exempel här är min klass DeckOfCards som hade hög metodkomplexitet och låg täckning. </p>
    <h1>Phpmetrics</h1>
    <p>Efter att analyserat rapporten Är de 3 klasser jag kommit fram till är i behov av förbättring är LibraryController, Card21Controller och LuckyControllerTwig. Alla 3 har högst Relative system complexity  där LibraryController har överlägsett högst värde. Alla 3 har även högt antal metoder.</p>
    <a href="{{ asset('img/PhpMetrics.png') }}">
        <img src="{{ asset('img/PhpMetrics.png') }}" alt="PhpMetric data">
    </a>
    <h1>Scrutinizer</h1>
    <img src="https://scrutinizer-ci.com/g/didrikva/report/badges/quality-score.png?b=master" />
    <img src="https://scrutinizer-ci.com/g/didrikva/report/badges/coverage.png?b=master" />
    <img src="https://scrutinizer-ci.com/g/didrikva/report/badges/build.png?b=master" />
    <p> <br><br>För att titta på resultaten jag fick kan man se att jag fick ett bra resultat generellt på koden och där builden blev godkänd. Dock blev min coverage kritiskt låg och det handlar egentligen om att jag var tvungen att excludera flera olika mappar för att jag inte skulle få 2700 fel, vilket Mikael sa att jag skulle göra. Dessa mappar var inte heller skriva av mig utan inporterade och därför inte relevant för projektet. Men det är såklart något man kan ha i åtanke vid projekt senare. Men huvudkoden och den använda koden fungerar som den ska.</p>
    <p><br><br><br><br>Mina “findings” kopplat till de 6 Cn. Codestyle hittar den mest buggar och liknande i DeckOfCards och LuckyControllerTwig. Antagligen kan detta bero på många och stora klasser med vissa otydligheter vad klasserna gör. Kan vara dålig dokumentation eller förvirrande kod. PhpMetrics hittar jag ingen exakt statistik för coverage. Men ifall man utgår ifrån komplexiteten kan man se att CardGame21 och DeckOfCards båda antagligen har lägre coverage elelr bara extremt hög komplex kod. Detta kan vara en koppling till dåligt täckt kod. Complexity kan vi enkelt se att det är några som har komplexiteten 14 och en klass LibraryController som har hela 16 i WMC (Weighted Method Count). Cohesion kna jag koppla till LibraryController då den ger en Blob varning. Denna hade antagligen behövts använda sig utan fler mindre klasser för att göra vissa funktioner och därmed minska Cohesion. Coupling var likt jag skrev innan med hur beroende klasserna är utav varandra. Här är det framförallt LibraryController som är beroende av andra klasser pågrund av databaser och liknande metoder utanför. Även DeckOFCards är beroende av både Card och CardGraphics fär att kunna fungera. CRAP Är också framförallt DeckOfCards som har höga värden framförallt pågrund av att koden är komplex och mindre kodteckning. Även Card21Game har relativt högt värde här med komplex kod.</p>
    <h1>Förbättringar</h1>
    <p>Jag har valt ut framförallt försöka fixa de klasser med högt Relative system complexity värde i PhpMetric. Detta igenom att försöka dela upp metoder eller göra dem mindre komplexa. Ifall man kollar på klassen LibraryController som har högst värde här så kan man se att alla beräkningar sker inuti klassen. Där är en lösning att göra en separat klass för beräkningar och mest använda librarycontroller som en router även dela upp de andra controlers som fick högt RSC score. Jag ska även försöka fixa de 3 issues jag fick i Scrutinizer då detta förhoppningsvis förbättrar mitt slutresultat och förbättrar kodkvaliten.</p>
    <h2>Före</h2>
    <a href="{{ asset('img/PhpMetrics.png') }}">
        <img src="{{ asset('img/PhpMetrics.png') }}" alt="PhpMetric data">
    </a>
    <h2>Efter</h2>
    <a href="{{ asset('img/phpMetrics2.png') }}">
        <img src="{{ asset('img/phpMetrics2.png') }}" alt="PhpMetric data">
    </a>
    <p>Förbättringarna såg till så att LibraryControllern halverades i Relative system complexity samt de andra stora komplexa kontrollerna fick lite mindre score. Alla stora klasserna hade runt 15 i WMC (Weighted Methods per Class) där LibraryController gått ner till hela 6 från 16 och de andra ligger nu runt 10. Förbättringarna har gjort alla klasserna mindre komplexa och enklare både att underhålla och förstå. Klasserna är uppdelade vilket även drivs snabbare vid körning då det inte krävs lika mycket kod i varje fil. De 3 issues jag hade i scrutinizer gav inget förändrat score där, men det är aldrig fel att förminska antalet fel i koden. <br><br>Alltså gav scrutinizer testen ingen direkt skillnad i testescore efter fixerna. phpMetrics blev rätt annorlunda där klasserna blev mindre komplexa, mindre i storlek, lättare att underhålla och förstå. </p>
    <h1>Diskussion</h1>
    <p>Såklart kan man aktivt jobba med clean code och förbättra kodkvaliten i sina projekt. Jag tycker phpMetrics var ett bra sätt med väldigt mycket data för att se och förstå hur ens klasser är. Uppbyggnad och eventuella buggar kan enklare bli hittade ifall det testas och körs ofta. <br>Fördelar är likt nämnt precis. Buggar och eventuella fel i koden kan enklare hittas snabbare och tidigare. Clean code gör de också lättare för andra att förstå och ifall alla går efter samma kodstandard har alla samma tankesätt när kod skrivs och förändras. Några nackdelar skulle väl vara ifall man delar upp klasser och liknande kan de bli svårare för andra utvecklare att veta vad som gör vad, eller bara generellt att hitta i koden. Även kan vissa tester och fel ge lite "onödiga" fel där man verkligen tänker, är detta ett nödvändigt fel? Koden fungerar ju och det gör ingen större skillnad i hur koden ser ut eller fungerar ifall man skriver det som dem vill. <br>Jag skulle inte direkt säga jag ser enorma möjligheter än just att det är enklare för andra att förstå sig på. </p>
    
</div>
{% endblock %}