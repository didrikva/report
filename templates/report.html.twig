{% extends "base.html.twig" %}

{% block title %}About{% endblock %}

{% block body %}
    <div id="content">
        <h1 id ="kmom01">Kmom01</h1>
        <p>Vi tidigare kunskap inom objektorientering kommer bara från det vi lärt oss i tiidgaree kurser. Ingen större erfarenhet direkt. PHPs modell är likt andra språk. Claserna ärver från varandra och man skaparar classer för att kunna hanytera och strukturera upp koden tydligare ochb enklare. Jag tycker att strukturen för uppgiften är ganska bra uppdelad. Man förstår sig på hur Mikael la upp koden från början och kunde utgå från det. Routsen var simpla att förstå sig på. Jag har lite svårare att just förtå kanske hur man skapar nya classer och deras koppling då Mikael inte gick igenom det allt för mycket, men grundprincipen förstår jag. PHP the right way är en bra källa för att hitta den lilla extra kodsnutten man kanske glömt eller helt enkelt inte lärt sig än. Det jag tyckte var extra värdefullt var delen med tid då jag använde hjälpen där för att klara uppgiften, även om vi använt tid i webtec var det bra att färska upp minnet med. Mitt TIL detta kmom är nog hur man kan skapa routes och liknande med hjälp av php och twig filer för att bygga en webbplats. </p>
        <h1 id ="kmom02">Kmom02</h1>
        <p>Arv är precis som det låter det ärver kod och liknande från en annan klass. Komposition är när en klass använder sig utan andra klasser. Interface måste implemenetar alla metoder utan att definera hur metoderna är implementerade. Trait återanvänder kod i klasser och utökar deras användning, ser ut som en klass men kallas Trait. Jag är rätt nöjd med min kod. Jag använder mig utan kodgrunden mikael gav mig från föreläsningarna och tycker jag löste det bra även ifal jag suttit och kämpat med detta lite för länge. Jag tycker själva arbetet med symfony är ganska trevligt. Sessionen hade jag inga större problem med utan det var mer POST och GET som strulade för mig där jag först inte tänkte man var tvungen att använda sig utav ett formulä mmen kunde inte få till det utan så det blev ett POST formulär som sen uppdaterar all kod och sen visar jag det via en JSON api. Mitt TIL är likt jag precis skrev med POST och GET. Jag har suttit 80% av tiden för att få till en rimlig POST/GET route för att klara uppgidten likt ni vill ha det. Jag hittade ingen annan lösning än att skapa ett formulär för api delen och sedan visa det med en json route så det fick bli så. </p>
        <h1 id ="kmom03">Kmom03</h1>
        <p>Jag tror faktiskt inte att flödesdiagram och psuedokod hjälpte mig speciellt mycket. Jag vet hur spelet fungerar sen tidigare och mycket av problemen jag stötte på hade jag inte kunnat förutspå. Själva grundprincipen var ganska enkel och jag hade det i huvudet hela tiden. Jag tycker att jag lyckades ganska bra med min lösning. Jag fick till en snygg design som liknar ett spelbord och uppdelning av kort för både bank och spelare är väldesignat. Det finns alltid förbättringar och jag kan säkert ha använt metoder som var onödiga eller för många if-satser eller foreach loopar osv. Men generellt tycker jag det är ett bra fungerande spel med en god design. Så här långt tycker jag det verkar ganska logiskt att koda i ramverket. Vissa delar får man fundera extra när ramverket gnäller på ett fel osv, men oftast går det att lösa efter lite tester och liknande. Mitt TIL är nog bra med testerna med phpmd och phpstan. Det tog mycket googlande och försök för att både förstå vissa fel och vad som behövdes göras för att rätta dem. Vissa saker gnällde också de olika programmen på motsatta saker. Fixade man felet på den ena blev det fel på den andra osv. Det tog mig lång tid att fixa allt men det är en lärdom till kommande kursmoment. </p>
   </div>
{% endblock %}