{% extends "base.html.twig" %}

{% block title %}About{% endblock %}

{% block body %}
    <div id="content">
        <h1 id ="kmom01">Kmom01</h1>
        <p>Vi tidigare kunskap inom objektorientering kommer bara från det vi lärt oss i tiidgaree kurser. Ingen större erfarenhet direkt. PHPs modell är likt andra språk. Claserna ärver från varandra och man skaparar classer för att kunna hanytera och strukturera upp koden tydligare ochb enklare. Jag tycker att strukturen för uppgiften är ganska bra uppdelad. Man förstår sig på hur Mikael la upp koden från början och kunde utgå från det. Routsen var simpla att förstå sig på. Jag har lite svårare att just förtå kanske hur man skapar nya classer och deras koppling då Mikael inte gick igenom det allt för mycket, men grundprincipen förstår jag. PHP the right way är en bra källa för att hitta den lilla extra kodsnutten man kanske glömt eller helt enkelt inte lärt sig än. Det jag tyckte var extra värdefullt var delen med tid då jag använde hjälpen där för att klara uppgiften, även om vi använt tid i webtec var det bra att färska upp minnet med. Mitt TIL detta kmom är nog hur man kan skapa routes och liknande med hjälp av php och twig filer för att bygga en webbplats. </p>
        <h1 id ="kmom02">Kmom02</h1>
        <p>Arv är precis som det låter det ärver kod och liknande från en annan klass. Komposition är när en klass använder sig utan andra klasser. Interface måste implemenetar alla metoder utan att definera hur metoderna är implementerade. Trait återanvänder kod i klasser och utökar deras användning, ser ut som en klass men kallas Trait. Jag är rätt nöjd med min kod. Jag använder mig utan kodgrunden mikael gav mig från föreläsningarna och tycker jag löste det bra även ifal jag suttit och kämpat med detta lite för länge. Jag tycker själva arbetet med symfony är ganska trevligt. Sessionen hade jag inga större problem med utan det var mer POST och GET som strulade för mig där jag först inte tänkte man var tvungen att använda sig utav ett formulä mmen kunde inte få till det utan så det blev ett POST formulär som sen uppdaterar all kod och sen visar jag det via en JSON api. Mitt TIL är likt jag precis skrev med POST och GET. Jag har suttit 80% av tiden för att få till en rimlig POST/GET route för att klara uppgidten likt ni vill ha det. Jag hittade ingen annan lösning än att skapa ett formulär för api delen och sedan visa det med en json route så det fick bli så. </p>
        <h1 id ="kmom03">Kmom03</h1>
        <p>Jag tror faktiskt inte att flödesdiagram och psuedokod hjälpte mig speciellt mycket. Jag vet hur spelet fungerar sen tidigare och mycket av problemen jag stötte på hade jag inte kunnat förutspå. Själva grundprincipen var ganska enkel och jag hade det i huvudet hela tiden. Jag tycker att jag lyckades ganska bra med min lösning. Jag fick till en snygg design som liknar ett spelbord och uppdelning av kort för både bank och spelare är väldesignat. Det finns alltid förbättringar och jag kan säkert ha använt metoder som var onödiga eller för många if-satser eller foreach loopar osv. Men generellt tycker jag det är ett bra fungerande spel med en god design. Så här långt tycker jag det verkar ganska logiskt att koda i ramverket. Vissa delar får man fundera extra när ramverket gnäller på ett fel osv, men oftast går det att lösa efter lite tester och liknande. Mitt TIL är nog bra med testerna med phpmd och phpstan. Det tog mycket googlande och försök för att både förstå vissa fel och vad som behövdes göras för att rätta dem. Vissa saker gnällde också de olika programmen på motsatta saker. Fixade man felet på den ena blev det fel på den andra osv. Det tog mig lång tid att fixa allt men det är en lärdom till kommande kursmoment. </p>
        <h1 id ="kmom04">Kmom04</h1>
        <p>Jag tyckte nog phpunit var ganska bra. Man testkör en hel del av koden och dne ger en score av hur mycket du har kört. Något jag saknar var kansek tydligare och bättre instruktioner på hur och avd man kan testa. Jag lyckades nå 100% på 2 av classerna och 80 samt 96% på de andra. Jag har en lite misstanke att det har med konstruktorn att göra och det är svårt att göra tester på enbart den, iallafall ifall jag inte missat något. Så jag tycker jag lyckades bra med min täckning av kod. Det skulle nog vara juts konstruktorn men tror bara det var jag som inte vet hur man testar just det. Annars skulle jag säga det går att testa ganska bra med möjlighet att göra fler funktioner i samma test. Det finns såklart alltid möjligheter att göra bättre tester, och jag insgå väl lite att man kan lägga till exeptions på många ställen för att kunna testa det också. Jag skrev om mest delar som hämtade befintlig kod jag hade som i game_21 classen skapade jag en get metod för att hämta ut värden. Ja ifall koden är testbar är den ju oftast renare och bättre kod. Ifall man kan testa vissa delar separat är den ju också bättre då det betyder att koden är uppdelad och därför sparar man oftast körtid. Mitt TIL är nog egentligen allt med testandet. Har såklart testat lite innan i andra kurser men detta var på ett annat sätt med andra tester. Även namespace och liknande hade jag lite problem med i början att få till korrekt pågrund av hur kopieringen hade lagt filerna osv. </p>
        <h1 id ="kmom05">Kmom05</h1>
        <p>Jag tycker att det rullade på bra med övningen. Övningen gav bra grund för att skapa ett bibliotek och man kunde i princip använda den för att göra en ny databas med bibliotek istället. Jag tänkte mig tydliga knappar som berättar vad de olika routsen man klickar till gör. Försöka göra det så tydligt som möjligt vad som behövs och mera. Jag tycker det fungerade hyfsat. Tyckeer sättet vi gjorde i databaskursen var lättare och tydligare. Men principen är samma och nu var det lite snabbt utlärt så jag förstår det kanske inte gör att dyka för djupt ner i hur allt fungerar osv. Återigen tycker jag ORM ändå fungerar rätt hyfsat. Jag fattade exempelkoden ganska lätt och kunde efter det klara övningen. Mitt TIL är arbete med databas i php och autogenererade tabeller med värden. </p>
        <h1 id ="kmom06">Kmom06</h1>
        <p>Jag tyckte faktiskt phpMetrics va väldigt bra. Det gav verkligen en inblick på hur ens klasser var uppbyggda och hur komplexa och "svåra" dem var. Det fanns nästan för mycket information för att kunna ta in och smälta allt men jag tror jag försto det viktigaste. Jag uppskattade Relative system complexity statistiken mycket då den gav en tydlig bild av hur komplex din kod var och att den antagligen behövdes separeras till fler filer eller göras ja mindre komplex. Användningen av scrutinizer strulade lite för mig i början. Första gången jag körde tog det 40 minuter innan jag avslutade körningen då jag tyckte det tog orimligt lång tid. Jag fick då ca 2700 fel och issues och min kod var nästan oanvändbar. Jag skickade mina problem till Mikael där han rekommenderade att ta bort alla utåtstående mappar i just scrutinizer testerna. Efter att jag gjorde det tog testerna ca 5 minuter och kollade bara igenom de viktiga delarna och framförallt de delarna som jag själv faktiskt kodat. Annars var verktyget användbart och gav en bra överblick av hur bra skriven kod man hade. Kodtäckningen gav inte så mycket för mig då jag var tvungen att stryka en hel del mappar som kollades men resterande var fortfarande på höga betyg vilket visar på en bra skribven kod. Jag tycker generellt vissa valideringar "klagar" på lite väl mycket. Såklart är det att bara ignorera egentligen men vissa saker är återigen lite för petigt enligt min smak. Vi lär oss hur man ska koda och göra liknande saker korrekt. Lägga till kommentarer och liknande kan vara viktigt ifall man gör arbeten i grupper där fler människor enklare ska förstå koden man skrivit. Badges kan absolut vara hjälpsamma för att se hur bra kod man skrivit. Sen kommer det nästan vara ett faktum att ifall man gör betydligt större projekt än vad vi gör, kommer det oftare vara fler problem, och att få ett högra score då är mer imponerand eoch verkligen ett tecken man skriver bra kod. Mitt TIL detta kursmoment är både insynen på hur komplexa vissa klasser var men även generellt med testing. Jag fick även trixa lite med att få till uppdelningen av klasser för att få allt att fungera trotts nya funktioner och klasser.</p>
    
   </div>
{% endblock %}